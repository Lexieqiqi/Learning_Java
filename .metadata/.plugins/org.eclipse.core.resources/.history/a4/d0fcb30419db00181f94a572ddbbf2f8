package Linked_List;

class Wrapper {
    /**
     * Definition for singly-linked list.

     */
      public class ListNode {
          int val;
          ListNode next;
          ListNode(int x) { val = x; }
     }
    public static int[] stringToIntegerArray(String input) {
        System.out.println(input);
        input = input.trim(); //去掉字符串的首尾空格
        input = input.substring(1, input.length() - 1); //取字符串中间的部分
        if (input.length() == 0) {   //传入的字符串为空
          return new int[0];
        }
    
        String[] parts = input.split(",");  //以逗号分隔符把input分开成数组
        int[] output = new int[parts.length];
        for(int index = 0; index < parts.length; index++) {
            String part = parts[index].trim();
            System.out.println(part);
            output[index] = Integer.parseInt(part); //拆箱，Integer类
        }
        return output;
    }
    
    public static ListNode stringToListNode(String input) {
        // Generate array from the input
        int[] nodeValues = stringToIntegerArray(input);
    
        // Now convert that list into linked list
        ListNode dummyRoot = new ListNode(0);
        ListNode ptr = dummyRoot;
        for(int item : nodeValues) {
            ptr.next = new ListNode(item);
            ptr = ptr.next;
        }
        return dummyRoot.next;
    }
    
    public static void prettyPrintLinkedList(ListNode node) {
      while (node != null && node.next != null) {
          System.out.print(node.val + "->");
          node = node.next;
      }
    
      if (node != null) {
        System.out.println(node.val);
      } else {
        System.out.println("Empty LinkedList");
      }
    }
}
public class MainClass {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line;
        while ((line = in.readLine()) != null) {
            ListNode node = Wrapper.stringToListNode(line);
            Wrapper.prettyPrintLinkedList(node);
        }
    }
}